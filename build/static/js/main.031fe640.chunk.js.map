{"version":3,"sources":["components/sessions/Sessions.js","components/userInput/CurrentTaskList.js","components/userInput/UserInput.js","components/startButton/StartButton.js","components/timer/Countdown.js","components/timer/CheckList.js","components/timer/EndOfDayItem.js","components/timer/EndOfDayList.js","components/timer/Timer.js","App.js","index.js"],"names":["Sessions","startBtn","sessList","className","Object","keys","map","time","index","key","Math","floor","random","indexOf","task","CurrentTaskList","curTaskList","UserInput","updateCurTaskListState","updateSessListState","useState","input","setInput","hour","setHour","minute","setMinute","ampm","setAmpm","style","display","autoComplete","onSubmit","event","preventDefault","push","document","getElementById","blur","target","reset","alert","type","name","placeholder","onChange","value","id","length","defaultValue","StartButton","updateStartButtonState","onClick","Countdown","totCountdownSecs","sessEndTime","curEndTimeSecs","stateCountdownSecs","setStateCountdownSecs","running","setRunning","audio","useEffect","myTimer","setInterval","curTime","Date","curTimeSecs","getHours","getMinutes","getSeconds","clearInterval","setTimeout","play","totSecs","wholeCountdownMins","wholeCountdownHours","hours","String","mins","secs","clockify","CheckList","sessTasks","onCheck","undefined","htmlFor","EndOfDayItem","EndOfDayList","endTimes","tasks","Timer","counter","setCounter","statusArray","setStatusArray","setTotCountdownSecs","setcurEndTimeSecs","checked","unchecked","endTimeHour","substring","endTimeMin","endTimeAmPm","charAt","endTimeSecs","parseInt","splice","App","setCurTaskList","setSessList","setStartBtn","newTaskList","newSessObj","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.031fe640.chunk.js","sourcesContent":["import React from 'react';\r\n// import SessionItem from './SessionItem';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Sessions = ({ startBtn, sessList }) => {  \r\n    return (\r\n      // hide div when start button pressed\r\n      !startBtn && (\r\n        <div className='all-sessions-container'>\r\n          {/* map over session list prop keys, returning a session item div for each */}\r\n          {Object.keys(sessList).map((time, index) => (\r\n            <div className='session-container' key={Math.floor(Math.random() * 1000 + 1)}>\r\n              <h3>\r\n                Session {Object.keys(sessList).indexOf(time) + 1} End - {time}\r\n              </h3>\r\n              <br></br>\r\n              <ul className='session-ul'>\r\n                {/* map over task list array, return a list item for each task */}\r\n                {sessList[time].map((task, index) => (\r\n                  <li\r\n                    className='session-task'\r\n                    key={index}\r\n                  >\r\n                    {task}\r\n                  </li>\r\n                ))}\r\n              </ul>\r\n            </div>\r\n            // SessionItem component kept disappearing on deployment, temp fix above\r\n            // <SessionItem\r\n            //   id={Object.keys(sessList).indexOf(time) + 1}\r\n            //   key={Math.floor(Math.random() * 1000 + 1)}\r\n            //   time={time}\r\n            //   sessTasks={sessList[time]}\r\n            // />\r\n          ))}\r\n        </div>\r\n      )\r\n    );\r\n}\r\n\r\nSessions.propTypes = {\r\n  startBtn: PropTypes.bool.isRequired,\r\n  sessList: PropTypes.object.isRequired,\r\n}\r\n\r\nexport default Sessions;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst CurrentTaskList = ({ curTaskList }) => {    \r\n    return (\r\n      <div className='curr-task-ul-container'>\r\n        <ul className='curr-task-ul'>\r\n          {/* maps through current task list array, making each element a list item with a random key from 1 to 1000 */}\r\n          {curTaskList.map((task, index) => (\r\n            <li key={index}>{task}</li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    );\r\n}\r\n\r\nCurrentTaskList.propTypes = {\r\n  curTaskList: PropTypes.array.isRequired\r\n}\r\n\r\nexport default CurrentTaskList;","import React, { useState } from 'react';\r\nimport CurrentTaskList from './CurrentTaskList';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst UserInput = ({ curTaskList, updateCurTaskListState, sessList, updateSessListState, startBtn }) => {\r\n  // initializing component state\r\n  const [input, setInput] = useState('');\r\n  const [hour, setHour] = useState('');\r\n  const [minute, setMinute] = useState('');\r\n  const [ampm, setAmpm] = useState(' am');\r\n\r\n  // change input state when typing in task box\r\n  const onChange = (event) => {\r\n    setInput(event.target.value);\r\n  };\r\n  // change hour state when hour selected from dropdown\r\n  const onHourChange = (event) => {\r\n    setHour(event.target.value);\r\n  };\r\n  // change minute state when minute selected from dropdown\r\n  const onMinuteChange = (event) => {\r\n    setMinute(event.target.value);\r\n  };\r\n  // change am/pm state when selected from dropdown\r\n  const onAmPmChange = (event) => {\r\n    setAmpm(event.target.value);\r\n  };\r\n\r\n  // runs when add-task button clicked\r\n  const onTaskSubmit = (event) => {\r\n    event.preventDefault();\r\n    // check to make sure text-box not empty\r\n    if (input) {\r\n      // add task to the current task list, then update the app-level state, and reset the the input state and text-box\r\n      curTaskList.push(input);\r\n      updateCurTaskListState(curTaskList);\r\n      setInput('');\r\n      document.getElementById('add-task').blur();\r\n      event.target.reset();\r\n    } else {\r\n      // alert user if text-box empty\r\n      alert('No Task Entered!');\r\n    }\r\n  };\r\n\r\n  // runs when add-endtime button clicked\r\n  const onTimeSubmit = (event) => {\r\n    event.preventDefault();\r\n    // alert user if no hour or minute selected\r\n    if (hour.length === 0 || minute.length === 0) {\r\n      alert('No time entered!');\r\n    } else if (curTaskList.length === 0) {\r\n      alert('Enter all session tasks before end time')\r\n    } else {\r\n      // add entry to sessList prop, where the end-time is the key and an array of the current task list is the value\r\n      sessList[hour + minute + ampm] = curTaskList;\r\n      // change app-level sessList state to match new sessList prop, then reset app-level curTask state to empty array and am/pm to am\r\n      updateSessListState(sessList);\r\n      updateCurTaskListState([]);\r\n      document.getElementById('add-end-time').blur();\r\n      event.target.reset();\r\n      setAmpm(' am');\r\n    }\r\n  };\r\n\r\n    return (\r\n      <div\r\n        className='user-input-comp-container'\r\n        // when start button is clicked, hide div\r\n        style={{ display: startBtn ? 'none' : '' }}\r\n      >\r\n        <div className='form-container'>\r\n          <form\r\n            className='task-form'\r\n            autoComplete='off'\r\n            onSubmit={onTaskSubmit}\r\n          >\r\n            <input\r\n              type='text'\r\n              name='task'\r\n              placeholder='Enter New Task...'\r\n              onChange={onChange}\r\n            />\r\n            <br></br>\r\n            <input\r\n              id='add-task'\r\n              type='submit'\r\n              className='add-task-btn'\r\n              value='Add Task'\r\n            />\r\n          </form>\r\n          <form\r\n            className='time-form'\r\n            autoComplete='off'\r\n            onSubmit={onTimeSubmit}\r\n          >\r\n            <select name='hours' id='hours' onChange={onHourChange}>\r\n              <option value=''>hr</option>\r\n              <option value='01'>1</option>\r\n              <option value='02'>2</option>\r\n              <option value='03'>3</option>\r\n              <option value='04'>4</option>\r\n              <option value='05'>5</option>\r\n              <option value='06'>6</option>\r\n              <option value='07'>7</option>\r\n              <option value='08'>8</option>\r\n              <option value='09'>9</option>\r\n              <option value='10'>10</option>\r\n              <option value='11'>11</option>\r\n              <option value='12'>12</option>\r\n            </select>\r\n            <select name='minutes' id='minutes' onChange={onMinuteChange}>\r\n              <option value=''>min</option>\r\n              <option value=':00'>:00</option>\r\n              <option value=':15'>:15</option>\r\n              <option value=':30'>:30</option>\r\n              <option value=':45'>:45</option>\r\n            </select>\r\n            <select name='am-pm' id='am-pm' \r\n            onChange={onAmPmChange}\r\n            >\r\n              <option value=' am' defaultValue>\r\n                am\r\n              </option>\r\n              <option value=' pm'>pm</option>\r\n            </select>\r\n            <br></br>\r\n            <input\r\n              id='add-end-time'\r\n              type='submit'\r\n              className='end-time-btn'\r\n              value='Add End Time'\r\n            />\r\n          </form>\r\n        </div>\r\n        <div className='current-tasks-container'>\r\n          {/* pass the current task list array to child component */}\r\n          <CurrentTaskList curTaskList={curTaskList} />\r\n        </div>\r\n      </div>\r\n    );\r\n}\r\n\r\nUserInput.propTypes = {\r\n  curTaskList: PropTypes.array.isRequired,\r\n  updateCurTaskListState: PropTypes.func.isRequired, \r\n  sessList: PropTypes.object.isRequired,\r\n  updateSessListState: PropTypes.func.isRequired,\r\n  startBtn: PropTypes.bool.isRequired,\r\n}\r\n\r\nexport default UserInput;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst StartButton = ({ startBtn, sessList, updateStartButtonState }) => {\r\n  // when clicked, update app-level start button state\r\n  const onClick = (event) => {\r\n    event.preventDefault();\r\n    updateStartButtonState();\r\n    document.getElementById('start').blur();\r\n  };\r\n\r\n    return (\r\n      <div\r\n        className='start-btn-comp-container'\r\n        // hide div when start button clicked\r\n        style={{ display: startBtn ? 'none' : '' }}\r\n      >\r\n        <div className='start-btn-activate'>\r\n          {/* when first session added to session list object, return the div */}\r\n          {Object.keys(sessList).length > 0 ? (\r\n            <div className='start-btn-comp-container'>\r\n              <input\r\n                id='start'\r\n                type='submit'\r\n                className='start-btn'\r\n                value='Start Day!'\r\n                onClick={onClick}\r\n              />\r\n            </div>\r\n          ) : null}\r\n        </div>\r\n      </div>\r\n    );\r\n}\r\n\r\nStartButton.propTypes = {\r\n  startBtn: PropTypes.bool.isRequired,\r\n  sessList: PropTypes.object.isRequired,\r\n  updateStartButtonState: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default StartButton;","import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Countdown = ({ totCountdownSecs, sessEndTime, curEndTimeSecs }) => {\r\n  // initializing component state\r\n  const [stateCountdownSecs, setStateCountdownSecs] = useState(totCountdownSecs);\r\n  const [running, setRunning] = useState(false);\r\n\r\n  // declaring variable\r\n  let audio = document.getElementById('beep');\r\n\r\n  // runs on stateCountdownSecs state change\r\n  useEffect(() => {\r\n    let myTimer;\r\n    // check if state has an active countdown value\r\n    if (stateCountdownSecs > 0) {\r\n      // if state NOT running, change state to true\r\n      if (!running) {\r\n        setRunning(true);\r\n      }\r\n        // calculate number of seconds to end time every second and replace in state. ineffecient but works around the idle window issue causing js to slowdown or freeze.\r\n        myTimer = setInterval(() => {\r\n          let curTime = new Date();\r\n          let curTimeSecs =\r\n            (curTime.getHours() * 60 + curTime.getMinutes()) * 60 +\r\n            curTime.getSeconds();\r\n          setStateCountdownSecs(curEndTimeSecs - curTimeSecs);\r\n        }, 1000);\r\n\r\n        // subtract 1 from state countdown every 1 second, this would replace code above if idle window did not throw off countdown\r\n        // setStateCountdownSecs(stateCountdownSecs => \r\n        //   stateCountdownSecs - 1), 987);\r\n        return () => clearInterval(myTimer);\r\n    } else {\r\n      // check if state is actively counting down\r\n      if (running) {\r\n        // play alarm, set running to false\r\n        setTimeout(() => {audio.play()}, 1000);\r\n        setRunning(false);\r\n      }\r\n    }\r\n  }, [stateCountdownSecs, audio, curEndTimeSecs, running])\r\n\r\n  // runs when totCoundownSecs prop changes\r\n  useEffect(() => setStateCountdownSecs(totCountdownSecs), [totCountdownSecs]);\r\n\r\n  // changes total seconds from integer to time-formatted hh:mm:ss value\r\n  const clockify = (totSecs) => {\r\n    let wholeCountdownMins = (totSecs - (totSecs % 60)) / 60;\r\n    let wholeCountdownHours =\r\n      (wholeCountdownMins - (wholeCountdownMins % 60)) / 60;\r\n    let hours =\r\n      wholeCountdownHours < 10\r\n        ? String('0' + wholeCountdownHours)\r\n        : String(wholeCountdownHours);\r\n    let mins =\r\n      wholeCountdownMins - 60 * wholeCountdownHours < 10\r\n        ? '0' + String(wholeCountdownMins - 60 * wholeCountdownHours)\r\n        : String(wholeCountdownMins - 60 * wholeCountdownHours);\r\n    let secs =\r\n      totSecs - 60 * wholeCountdownMins < 10\r\n        ? '0' + String(totSecs - 60 * wholeCountdownMins)\r\n        : String(totSecs - 60 * wholeCountdownMins);\r\n    // if countdown went passed 0, return 00:00:00\r\n    if ((totSecs - 60 * wholeCountdownMins) < 0) {\r\n      return `${hours}:${mins}:00`;\r\n    } else {\r\n      return `${hours}:${mins}:${secs}`;\r\n    }\r\n  };\r\n\r\n    return (\r\n      <div className='countdown-comp-container'>\r\n        <div className='countdown-timer'>\r\n          {/* return hh:mm:ss countdown value */}\r\n          {clockify(stateCountdownSecs)}\r\n        </div>\r\n        <div className='countdown-endtime'>{sessEndTime}</div>\r\n      </div>\r\n    );\r\n}\r\n\r\nCountdown.propTypes = {\r\n  sessList: PropTypes.array,\r\n  totCountdownSecs: PropTypes.number.isRequired,\r\n  curEndTimeSecs: PropTypes.number.isRequired\r\n}\r\n\r\nexport default Countdown;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst CheckList = ({ sessTasks, onCheck }) => {\r\n    return (\r\n      // return form when session list has been filled from parent\r\n      sessTasks !== undefined && (\r\n        <form className='checklist-comp-container'>\r\n          {/* map through session tasks array, return a checkbox item for each element */}\r\n          {sessTasks.map((task, index) => (\r\n            <div\r\n            // using random here to clear checkmarks from previous check list\r\n              key={Math.floor(Math.random() * 1000 + index)}\r\n              className='check-item'\r\n            >\r\n              <input\r\n                className='check'\r\n                type='checkbox'\r\n                id={index}\r\n                name={task}\r\n                onClick={onCheck}\r\n              ></input>\r\n              <label className='item' htmlFor={task}>\r\n                {task}\r\n              </label>\r\n            </div>\r\n          ))}\r\n        </form>\r\n      )\r\n    );\r\n}\r\n\r\nCheckList.propTypes = {\r\n  sessTasks: PropTypes.array,\r\n  onCheck: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default CheckList;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst EndOfDayItem = ({ id, time, sessTasks }) => {\r\n    return (\r\n      <div className='endofdayitem-container'>\r\n        <h3>\r\n          Session {id} - {time}\r\n        </h3>\r\n        <br></br>\r\n        <div className='endofdayitem-lists'>\r\n          <ul className='endofdayitem-ul'>\r\n            {/* checked tasks from tasks array */}\r\n            {sessTasks[0].map((task, index) => (\r\n              <li\r\n                className='completed-task'\r\n                key={index}\r\n              >\r\n                {task}\r\n              </li>\r\n            ))}\r\n          </ul>\r\n          <ul className='endofdayitem-ul'>\r\n            {/* unchecked tasks from tasks array */}\r\n            {sessTasks[1].map((task, index) => (\r\n              <li\r\n                className='not-completed-task'\r\n                key={index}\r\n              >\r\n                {task}\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    );\r\n}\r\n\r\nEndOfDayItem.propTypes = {\r\n  id: PropTypes.number.isRequired,\r\n  time: PropTypes.string.isRequired,\r\n  sessTasks: PropTypes.array.isRequired,\r\n}\r\n\r\nexport default EndOfDayItem","import React from 'react';\r\nimport EndOfDayItem from './EndOfDayItem';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst EndOfDayList = ({ endTimes, tasks }) => {\r\n    return(\r\n      <div className='endofdaylist-comp-container'>\r\n        {/* map through end times array, return to endOfDayItem component the endtime and array of checked/unchecked tasks*/}\r\n        {endTimes.map((time, index) => (\r\n          <EndOfDayItem\r\n            id={endTimes.indexOf(time) + 1}\r\n            key={index}\r\n            time={time}\r\n            sessTasks={tasks[endTimes.indexOf(time)]}\r\n          />\r\n        ))}\r\n      </div>\r\n    );\r\n}\r\n\r\nEndOfDayList.propTypes = {\r\n  endTimes: PropTypes.array.isRequired,\r\n  tasks: PropTypes.array.isRequired,\r\n}\r\n\r\nexport default EndOfDayList;","import React, { useState, useEffect } from 'react';\r\nimport Countdown from './Countdown';\r\nimport CheckList from './CheckList';\r\nimport EndOfDayList from './EndOfDayList';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Timer = ({ sessList }) => {\r\n  // initializing component level state\r\n  const [counter, setCounter] = useState(0);\r\n  const [statusArray, setStatusArray] = useState([]);\r\n  const [totCountdownSecs, setTotCountdownSecs] = useState(0);\r\n  const [endTimes] = useState(Object.keys(sessList));\r\n  const [curEndTimeSecs, setcurEndTimeSecs] = useState(0);\r\n\r\n  // declaring variables\r\n  let checked = [];\r\n  let unchecked = sessList[endTimes[counter - 1]];\r\n\r\n  // runs when component first mounted\r\n  useEffect(() => {\r\n    // declaring variables for current time seconds and end time seconds\r\n    let curTime = new Date();\r\n    let curTimeSecs =\r\n      (curTime.getHours() * 60 + curTime.getMinutes()) * 60 +\r\n      curTime.getSeconds();\r\n    let endTimeHour = endTimes[counter].substring(0, 2);\r\n    let endTimeMin = endTimes[counter].substring(3, 5);\r\n    let endTimeAmPm = endTimes[counter].charAt(6);\r\n    let endTimeSecs =\r\n      (parseInt(endTimeHour) * 60 + parseInt(endTimeMin)) * 60 +\r\n      (endTimeAmPm === 'p' ? 43200 : 0);\r\n      \r\n    // adjusting end time seconds for 12 o'clock am/pm bug\r\n    if (parseInt(endTimeHour) === 12) {\r\n      (endTimeAmPm === 'a' ? endTimeSecs = endTimeSecs + 43200 : endTimeSecs = endTimeSecs - 43200)\r\n    }\r\n    // change component level count down seconds state and increace component level counter state\r\n    setcurEndTimeSecs(endTimeSecs);\r\n    setTotCountdownSecs(endTimeSecs - curTimeSecs);\r\n    setCounter(counter + 1)\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  // adds session item to checked/uncheck arrays when checked/unchecked\r\n  const onCheck = (event) => {\r\n    if (event.target.checked) {\r\n      checked.push(event.target.name);\r\n      unchecked.splice(unchecked.indexOf(event.target.name), 1);\r\n    } else {\r\n      unchecked.push(event.target.name);\r\n      checked.splice(checked.indexOf(event.target.name), 1);\r\n    }\r\n  };\r\n\r\n  // runs when next-session button clicked\r\n  const onNextClick = (event) => {\r\n    event.preventDefault();\r\n    // checking if more sessions to go through\r\n    if (counter < endTimes.length) {\r\n      // declaring variables for current time seconds and end time seconds\r\n      let curTime = new Date();\r\n      let curTimeSecs =\r\n        (curTime.getHours() * 60 + curTime.getMinutes()) * 60 +\r\n        curTime.getSeconds();\r\n      let endTimeHour = endTimes[counter].substring(0, 2);\r\n      let endTimeMin = endTimes[counter].substring(3, 5);\r\n      let endTimeAmPm = endTimes[counter].charAt(6);\r\n      let endTimeSecs =\r\n        (parseInt(endTimeHour) * 60 + parseInt(endTimeMin)) * 60 +\r\n        (endTimeAmPm === 'p' ? 43200 : 0);\r\n      \r\n      // adjusting end time seconds for 12 o'clock am/pm bug\r\n      if (parseInt(endTimeHour) === 12) {\r\n        (endTimeAmPm === 'a' ? endTimeSecs = endTimeSecs + 43200 : endTimeSecs = endTimeSecs - 43200)\r\n      }\r\n\r\n      // add 1 to component level counter state, add checked/unchecked arrays to comp level statusArray state, set new count down seconds in comp level state\r\n      setCounter(counter + 1);\r\n      setStatusArray(statusArray => [...statusArray, [checked, unchecked]]);\r\n      setTotCountdownSecs(endTimeSecs - curTimeSecs);\r\n      setcurEndTimeSecs(endTimeSecs);\r\n    } else {\r\n      // add 1 to comp level counter state and add checked/unchecked arrays to com level status array state\r\n      setCounter(counter + 1);\r\n      setStatusArray(statusArray => [...statusArray, [checked, unchecked]]);\r\n    }\r\n\r\n    document.getElementById('next').blur();\r\n  };\r\n\r\n  return (\r\n    <div className='timer-comp-container'>\r\n      {/* shows div if endtimes array not empty, endtime greater than 0, and counter less than length of endtimes array */}\r\n      {endTimes.length > 0 && totCountdownSecs > 0 && counter <= endTimes.length && (\r\n        <div className='countDown-container'>\r\n          {/* passing current endtime and countdown seconds to child */}\r\n          <Countdown sessEndTime={endTimes[counter-1]} totCountdownSecs={totCountdownSecs} curEndTimeSecs={curEndTimeSecs}/>\r\n        </div>\r\n      )}\r\n      <div className='checklist-container'>\r\n        {/* passing session tasks array and oncheck action to child */}\r\n        <CheckList\r\n          sessTasks={sessList[endTimes[counter - 1]]}\r\n          onCheck={onCheck}\r\n        />\r\n      </div>\r\n      {/* shows div if counter less than length of endtimes array */}\r\n      {counter <= endTimes.length && (\r\n        <div className='next-btn-container'>\r\n          <input\r\n            id='next'\r\n            type='submit'\r\n            className='next-btn'\r\n            value={\r\n              counter === endTimes.length\r\n                ? 'End Day!'\r\n                : 'Next Session'\r\n            }\r\n            onClick={onNextClick}\r\n          />\r\n        </div>\r\n      )}\r\n      {/* shows div when counter passes quantity of endtimes */}\r\n      {counter > endTimes.length && (\r\n        <div className='endofdaylist-container'>\r\n          {/* passing check/unchecked tasks array, and endtimes array to child */}\r\n          <EndOfDayList tasks={statusArray} endTimes={endTimes}/>\r\n        </div>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nTimer.propTypes = {\r\n  sessList: PropTypes.object.isRequired,\r\n}\r\n\r\nexport default Timer;","import React, { useState } from 'react';\nimport Sessions from './components/sessions/Sessions';\nimport UserInput from './components/userInput/UserInput';\nimport StartButton from './components/startButton/StartButton';\nimport Timer from './components/timer/Timer';\nimport './App.css';\n\nconst App = () =>  {\n  // initializing state\n  const [curTaskList, setCurTaskList] = useState([]);\n  const [sessList, setSessList] = useState({});\n  const [startBtn, setStartBtn] = useState(false);\n\n  // change current task-list in state to a new task-list\n  const updateCurTaskListState = (newTaskList) => {\n    setCurTaskList(newTaskList);\n  };\n\n  // add an object to session list in state\n  const updateSessListState = (newSessObj) => {\n    setSessList(newSessObj);\n  };\n\n  // change start button in state to true\n  const updateStartButtonState = () => {\n    setStartBtn(true);\n  };\n\n    return (\n      <div className='App'>\n        <div className='user-input-container'>\n          {/* current task list array, session list object, start button boolean, update task list action, and update session list action passed to child */}\n          <UserInput\n            curTaskList={curTaskList}\n            sessList={sessList}\n            startBtn={startBtn}\n            updateCurTaskListState={updateCurTaskListState}\n            updateSessListState={updateSessListState}\n          />\n        </div>\n        <div className='sessions-container'>\n          {/* session list object and start button boolean passed to child*/}\n          <Sessions\n            sessList={sessList}\n            startBtn={startBtn}\n          />\n        </div>\n        <div className='start-day-button-container'>\n          {/* session list object, start button boolean, and update task list action passed to child */}\n          <StartButton\n            sessList={sessList}\n            startBtn={startBtn}\n            updateStartButtonState={updateStartButtonState}\n          />\n        </div>\n        {/* if start button pressed, render Timer component */}\n        {startBtn && (\n        <div className='timer-container'>\n          {/* session list object passed to child */}\n          <Timer\n            sessList={sessList}\n          />\n        </div>\n        )}\n      </div>\n    );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}